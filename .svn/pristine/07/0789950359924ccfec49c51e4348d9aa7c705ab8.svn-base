package com.jxlt.udic.riskcontrol.website.controller;


import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONObject;
import com.jxlt.udic.riskcontrol.website.model.File;
import com.jxlt.udic.riskcontrol.website.service.FileService;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.multipart.MultipartFile;
import sun.misc.BASE64Encoder;

import java.io.IOException;

/**
 * @author: ajax
 * @create: 2020-09-30 16:06
 **/
@Slf4j
@RestController
@RequestMapping(value = "/common")
public class CommonController {

    @Autowired
    private FileService fileService;

    //流程图上传
    //接口：/common/flowsUpload:返回url
    //接口：url:返回base64
    @RequestMapping(value = "/flowsUpload",method = RequestMethod.POST)
    public String flowsUpload(@RequestParam("file") MultipartFile file) throws IOException {
        JSONObject result = new JSONObject();
        BASE64Encoder base64Encoder =new BASE64Encoder();
        String base64EncoderImg = base64Encoder.encode(file.getBytes());
        String fileId=Long.toString(System.currentTimeMillis());
        File file1=new File(fileId,base64EncoderImg,file.getOriginalFilename(),"/common/files?fileId="+fileId);
        fileService.insertSelective(file1);
        result.put("status",2000);
        result.put("msg","成功");
        result.put("url", "/common/files?fileId="+fileId);
        return result.toJSONString();
    }

    //流程图获取
    @RequestMapping(value = "/files",method = RequestMethod.GET)
    public String getFiles(@RequestParam String fileId){
        File file=fileService.selectByPrimaryKey(fileId);
        return file.getBase64Text();
    }

    @RequestMapping(value = "/getDomainList")
    public String getDomainList(){
        return "getDomainList";
    }
//    获取集团廉洁风险点列表
    @RequestMapping(value = "/getGroupTargetList")
    public String getGroupTargetList(){
        return "获取集团廉洁风险点列表";
    }

//    获取省分廉洁风险点列表
    @RequestMapping(value = "/getProvTargetList")
    public String getProvTargetList(){
        return "获取省分廉洁风险点列表";
    }

//    获取省分廉洁风险点防控措施列表
    @RequestMapping(value = "/getProvControlList")
    public String getProvControlList(){
        return "getProvControlList";
    }

}
