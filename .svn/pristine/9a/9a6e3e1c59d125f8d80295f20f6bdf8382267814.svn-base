package com.jxlt.udic.riskcontrol.website.util;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.io.UnsupportedEncodingException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Objects;
import java.util.stream.Collectors;

import javax.servlet.http.HttpServletResponse;

import org.apache.commons.lang.ArrayUtils;
import org.apache.commons.lang.StringUtils;
import org.apache.commons.net.ftp.FTPClient;
import org.apache.commons.net.ftp.FTPFile;
import org.apache.commons.pool2.ObjectPool;
import org.springframework.util.Assert;

import com.wxapp.ncplt.exception.BusinessException;

import lombok.extern.slf4j.Slf4j;

/**
 * @author 作者 liujiangshan:
 * @version 创建时间：2018年11月30日 下午2:38:50 类说明
 */
@Slf4j
public class FtpUtil {

	/**
	 * ftpClient连接池初始化标志
	 */
	private static volatile boolean hasInit = false;
	/**
	 * ftpClient连接池
	 */
	private static ObjectPool<FTPClient> ftpClientPool;

	/**
	 * 初始化ftpClientPool
	 *
	 * @param ftpClientPool
	 */
	public static void init(ObjectPool<FTPClient> ftpClientPool) {
		if (!hasInit) {
			synchronized (FtpUtil.class) {
				if (!hasInit) {
					FtpUtil.ftpClientPool = ftpClientPool;
					hasInit = true;
				}
			}
		}
	}

	/**
	 * 按行读取FTP文件
	 *
	 * @param remoteFilePath
	 *            文件路径（path+fileName）
	 * @return
	 * @throws IOException
	 */
	public static List<String> readFileByLine(String remoteFilePath) throws IOException {
		FTPClient ftpClient = getFtpClient();
		try (InputStream in = ftpClient.retrieveFileStream(encodingPath(remoteFilePath));
				BufferedReader br = new BufferedReader(new InputStreamReader(in))) {
			return br.lines().map(line -> StringUtils.trimToEmpty(line)).filter(line -> StringUtils.isNotEmpty(line))
					.collect(Collectors.toList());
		} finally {
			ftpClient.completePendingCommand();
			releaseFtpClient(ftpClient);
		}
	}

	/**
	 * 获取指定路径下FTP文件
	 *
	 * @param remotePath
	 *            路径
	 * @return FTPFile数组
	 * @throws IOException
	 */
	public static FTPFile[] retrieveFTPFiles(String remotePath) throws IOException {
		FTPClient ftpClient = getFtpClient();
		try {
			return ftpClient.listFiles(encodingPath(remotePath + "/"), file -> file != null && file.getSize() > 0);
		} finally {
			releaseFtpClient(ftpClient);
		}
	}

	/**
	 * 获取指定路径下FTP文件名称
	 *
	 * @param remotePath
	 *            路径
	 * @return ftp文件名称列表
	 * @throws IOException
	 */
	public static List<String> retrieveFileNames(String remotePath) throws IOException {
		FTPFile[] ftpFiles = retrieveFTPFiles(remotePath);
		if (ArrayUtils.isEmpty(ftpFiles)) {
			return new ArrayList<>();
		}
		return Arrays.stream(ftpFiles).filter(Objects::nonNull).map(FTPFile::getName).collect(Collectors.toList());
	}

	/**
	 * 编码文件路径
	 */
	private static String encodingPath(String path) throws UnsupportedEncodingException {
		// FTP协议里面，规定文件名编码为iso-8859-1，所以目录名或文件名需要转码
		return new String(path.replaceAll("//", "/").getBytes("UTF-8"), "iso-8859-1");
	}

	/**
	 * 获取ftpClient
	 *
	 * @return
	 */
	private static FTPClient getFtpClient() {
		checkFtpClientPoolAvailable();
		FTPClient ftpClient = null;
		Exception ex = null;
		// 获取连接最多尝试3次
		for (int i = 0; i < 3; i++) {
			try {
				ftpClient = ftpClientPool.borrowObject();
				ftpClient.changeWorkingDirectory("/");
				break;
			} catch (Exception e) {
				ex = e;
			}
		}
		if (ftpClient == null) {
			throw new RuntimeException("Could not get a ftpClient from the pool", ex);
		}
		return ftpClient;
	}

	/**
	 * 释放ftpClient
	 */
	private static void releaseFtpClient(FTPClient ftpClient) {
		if (ftpClient == null) {
			return;
		}

		try {
			ftpClientPool.returnObject(ftpClient);
		} catch (Exception e) {
			log.error("Could not return the ftpClient to the pool", e);
			// destoryFtpClient
			if (ftpClient.isAvailable()) {
				try {
					ftpClient.disconnect();
				} catch (IOException io) {
				}
			}
		}
	}

	/**
	 * 检查ftpClientPool是否可用
	 */
	private static void checkFtpClientPoolAvailable() {
		Assert.state(hasInit, "FTP未启用或连接失败！");
	}

	/**
	 * 从ftp下载excel文件
	 * @param remoteFilePath
	 * @param response
	 * @throws IOException
	 */
	public static void downloadExcel(String remoteFilePath, HttpServletResponse response) throws IOException {
		String fileName = remoteFilePath.substring(remoteFilePath.lastIndexOf("/") + 1);
		fileName = new String(fileName.getBytes("UTF-8"), "iso-8859-1");
		//application/octet-stream 文件下载
		response.setContentType("application/vnd.ms-excel;charset=UTF-8");
		response.setHeader("Content-Disposition", "attachment;filename=" + fileName);

		FTPClient ftpClient = getFtpClient();
		try (InputStream in = ftpClient.retrieveFileStream(encodingPath(remoteFilePath));
				OutputStream out = response.getOutputStream()) {
			int size = 0;
			byte[] buf = new byte[10240];
			while ((size = in.read(buf)) > 0) {
				out.write(buf, 0, size);
				out.flush();
			}
		} finally {
			ftpClient.completePendingCommand();
			releaseFtpClient(ftpClient);
		}
	}
}
